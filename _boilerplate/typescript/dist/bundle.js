(()=>{"use strict";const e=e=>{throw new Error(e)};class t{entry;autoSolveBtn;game;constructor({board:e,autoSolve:t,game:r}){this.entry=e,this.autoSolveBtn=t,this.game=r,this.autoSolveBtn.addEventListener("click",this.autoSolve)}appendItem=(e,t)=>{const r=document.createElement("div");return r.className=t,e.appendChild(r),r};drawShape=(e,t)=>{e.classList.add(t)};rotate=(t,r)=>{let o="rotate(0deg)";switch(r){case"down":o="rotate(0deg)";break;case"left":o="rotate(90deg)";break;case"up":o="rotate(180deg)";break;case"right":o="rotate(-90deg)";break;default:throw e(r),new Error("invalid direction passed to Render.rotate")}t.style.transform=o};draw=()=>{this.game.matrix.map(((e,t)=>{const r=this.appendItem(this.entry,"row");e.map(((e,o)=>{const n=this.appendItem(r,"cell");this.drawShape(n,e.shape),n.addEventListener("click",(()=>{const{direction:e}=this.game.rotateCell({x:t,y:o});this.rotate(n,e)}))}))}))};autoSolve=()=>{console.log("autosolve")}}const r=["end","corner","tri","straight"],o=t=>{switch(t){case"corner":return[0,0,1,1];case"end":return[0,0,0,1];case"straight":return[1,0,1,0];case"tri":return[1,0,1,1];default:throw e(t),new Error(`invalid shape passed to assignConnectors method, accepted shapes are: ${JSON.stringify(r)}, but received: ${t}`)}},n=[["end","corner","corner","corner"],["corner","tri","tri","end"],["straight","end","tri","end"],["end","end","tri","corner"]],s=[["corner","corner","end"],["end","corner","tri"],["end","straight","corner"]];class a{shapes;matrix;constructor(e){this.shapes=3===e?s:n,this.matrix=this.shapes.reduce(((e,t)=>{const r=t.map((e=>({shape:e,connectors:this.assignConnectors(e),direction:"down"})));return e.push(r),e}),[])}assignConnectors=o;getShapes=()=>this.shapes;getCell=({x:e,y:t})=>this.matrix[e][t];rotateCell=({x:e,y:t})=>(this.matrix=((e,{x:t,y:r})=>{const o=[];for(let n=0;n<e.length;n++){const s=[];for(let o=0;o<e[n].length;o++){let a=e[n][o];const{direction:i}=a;if(n===t&&o===r){const t=a.connectors,r=t.pop();void 0!==r&&t.unshift(r),a={...e[n][o],connectors:[...t],direction:"down"===i?"left":"left"===i?"up":"up"===i?"right":"down"}}s.push(a)}o.push(s)}return o})(this.matrix,{x:e,y:t}),this.matrix[e][t])}new t({board:document.getElementById("pipes-board"),autoSolve:document.getElementById("pipes-auto-solve"),game:new a(3)}).draw(),new t({board:document.getElementById("pipes-board-large"),autoSolve:document.getElementById("pipes-auto-solve-large"),game:new a(4)}).draw()})();